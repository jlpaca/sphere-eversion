import analysis.normed_space.finite_dimension
import analysis.calculus.times_cont_diff
import measure_theory.set_integral

/-!
# Basic definitions and properties of loops
-/

section uncurry
open function

variables {Œ± Œ≤ Œ≥ Œ¥ : Type*}

example (f : Œ± ‚Üí Œ≤ ‚Üí Œ≥ ‚Üí Œ¥) : (Œ± √ó Œ≤) √ó Œ≥ ‚Üí Œ¥ :=
(uncurry ‚àò uncurry) f 

/-- Records a way to turn an element of `Œ±` into a function from `Œ≤` to `Œ≥`. -/
class has_uncurry (Œ± : Type*) (Œ≤ : out_param Type*) (Œ≥ : out_param Type*) := (uncurry : Œ± ‚Üí (Œ≤ ‚Üí Œ≥))

notation `‚Üø`:max x:max := has_uncurry.uncurry x

instance has_uncurry_base : has_uncurry (Œ± ‚Üí Œ≤) Œ± Œ≤ := ‚ü®id‚ü©

instance has_uncurry_induction [has_uncurry Œ≤ Œ≥ Œ¥] : has_uncurry (Œ± ‚Üí Œ≤) (Œ± √ó Œ≥) Œ¥ := 
‚ü®Œª f p, ‚Üø(f p.1) p.2‚ü©

variables (f : Œ± ‚Üí Œ≤ ‚Üí Œ≥) (g : Œ± ‚Üí Œ≤ ‚Üí Œ≥ ‚Üí Œ¥)

example (a : Œ±) (b : Œ≤) :  ‚Üøf (a, b)=  f a b := rfl

example (a : Œ±) (b : Œ≤) (c : Œ≥) :  ‚Üøg (a, b, c)=  g a b c := rfl

example :  ‚Üøf = uncurry f := funext (Œª _, rfl)

end uncurry

open set function finite_dimensional
open_locale big_operators topological_space

def nhds_set {Œ± : Type*} [topological_space Œ±] (s : set Œ±) : filter Œ± :=
Sup (nhds '' s)

variables {E : Type*} [normed_group E] [normed_space ‚Ñù E]
          {F : Type*} [normed_group F] [normed_space ‚Ñù F] [finite_dimensional ‚Ñù F]

local notation `d` := findim ‚Ñù F

local notation `smooth_on` := times_cont_diff_on ‚Ñù ‚ä§

def smooth_at (f : E ‚Üí F) (x : E) : Prop := ‚àÉ s ‚àà ùìù x, smooth_on f s

section surrounding_points

def affinely_independent {n : ‚Ñï} (p : fin n ‚Üí F) : Prop :=
sorry

-- def:surrounds_points
structure surrounding_pts (f : F) (p : fin (d + 1) ‚Üí F) (w : fin (d + 1) ‚Üí ‚Ñù) : Prop :=
(indep : affinely_independent p)
(w_pos : ‚àÄ i, 0 < w i)
(w_sum : ‚àë i, w i = 1)
(avg : ‚àë i, (w i) ‚Ä¢ (p i) = f)


def surrounded (f : F) (s : set F) : Prop :=
‚àÉ p w, surrounding_pts f p w ‚àß ‚àÄ i, p i ‚àà s

-- lem:int_cvx alternative formulation, compare int_cvx.lean
lemma surrounded_of_convex_hull {f : F} {s : set F} (hs : is_open s) (hsf : f ‚àà convex_hull s) : surrounded f s :=
begin
  
  sorry
end

-- lem:smooth_convex_hull
lemma smooth_surrounding {x : F} {p w} (h : surrounding_pts x p w) : 
  ‚àÉ w : F ‚Üí (fin (d+1) ‚Üí F) ‚Üí (fin (d+1) ‚Üí ‚Ñù),
  ‚àÄ·∂† y in ùìù x, ‚àÄ·∂† q in  ùìù p, smooth_at (uncurry w) (y, q) ‚àß 
                              ‚àÄ i, w y q i ‚àà Ioo (0 : ‚Ñù) 1 ‚àß 
                              ‚àë i, w y q i ‚Ä¢ q i = y :=
begin
  sorry
end

end surrounding_points

set_option old_structure_cmd true

variables (E F)

structure loop :=
(to_fun : ‚Ñù ‚Üí F)
(per' : ‚àÄ t, to_fun (t + 1) = to_fun t)

instance : has_coe_to_fun (loop F) := ‚ü®_, Œª Œ≥, Œ≥.to_fun‚ü©

/-- Any function `œÜ : Œ± ‚Üí loop F` can be seen as a function `Œ± √ó ‚Ñù ‚Üí F`. -/
instance has_uncurry_loop {Œ± : Type*} : has_uncurry (Œ± ‚Üí loop F) (Œ± √ó ‚Ñù) F := ‚ü®Œª œÜ p, œÜ p.1 p.2‚ü©

variables {E F}

namespace loop

/-- Periodicity of loops restated in terms of the function coercion. -/
lemma per (Œ≥ : loop F) : ‚àÄ t, Œ≥ (t + 1) = Œ≥ t :=
loop.per' Œ≥

/-- The average value of a loop. -/
noncomputable
def average [measurable_space F] [borel_space F] (Œ≥ : loop F) : F := ‚à´ x in Icc 0 1, (Œ≥ x)

/-- A loop `Œ≥` surrounds a point `x` if `x` is surrounded by values of `Œ≥`. -/
def surrounds (Œ≥ : loop F) (x : F) : Prop := 
  ‚àÉ t w : fin (d + 1) ‚Üí ‚Ñù, surrounding_pts x (Œ≥ ‚àò t) w

end loop

local notation `I` := Icc (0 : ‚Ñù) 1

lemma surrounding_loop_of_convex_hull {f b : F} {O : set F} (hs : is_open O) (hsf : f ‚àà convex_hull O) (hb : b ‚àà O) : 
‚àÉ Œ≥ : ‚Ñù ‚Üí loop F, continuous_on ‚ÜøŒ≥ (set.prod I univ) ‚àß 
                  ‚àÄ t, Œ≥ t 0 = b ‚àß
                  ‚àÄ s, Œ≥ 0 s = b ‚àß
                  ‚àÄ (t ‚àà I) s, Œ≥ t s ‚àà O ‚àß
                  (Œ≥ 1).surrounds f :=
begin
  sorry
end

structure surrounding_family (g b : E ‚Üí F) (Œ≥ : E ‚Üí ‚Ñù ‚Üí loop F) (U : set E) : Prop :=
(base : ‚àÄ x t, Œ≥ x t 0 = b x)
(t‚ÇÄ : ‚àÄ x s, Œ≥ x 0 s = b x)
(surrounds : ‚àÄ x, (Œ≥ x 1).surrounds $ g x)
(cont : continuous ‚ÜøŒ≥)

variables {g b : E ‚Üí F} {Œ© : set (E √ó F)} {U K : set E}

lemma local_loops
  {x‚ÇÄ : E}
  (hŒ©_op : ‚àÄ·∂† x in ùìù x‚ÇÄ, is_open (prod.mk x ‚Åª¬π' Œ©)) 
  (hg : ‚àÄ·∂† x in ùìù x‚ÇÄ, continuous_at g x) (hb : ‚àÄ·∂† x in ùìù x‚ÇÄ, continuous_at b x)
  (hb_in : ‚àÄ·∂† x in ùìù x‚ÇÄ, (x, b x) ‚àà Œ©) 
  (hconv : ‚àÄ·∂† x in ùìù x‚ÇÄ, g x ‚àà convex_hull (prod.mk x ‚Åª¬π' Œ©)) :
‚àÉ Œ≥ : E ‚Üí ‚Ñù ‚Üí loop F, ‚àÄ·∂† x in ùìù x‚ÇÄ, ‚àÄ (t ‚àà I) s, 
  (x, Œ≥ x t s) ‚àà Œ© ‚àß
  Œ≥ x 0 s = b x ‚àß
  (Œ≥ x 1).surrounds (g x) ‚àß
  continuous_at ‚ÜøŒ≥ ((x, t, s) : E √ó ‚Ñù √ó ‚Ñù) :=
begin
  
  sorry
end

lemma satisfied_or_refund {Œ≥‚ÇÄ Œ≥‚ÇÅ : E ‚Üí ‚Ñù ‚Üí loop F} 
  (h‚ÇÄ : surrounding_family g b Œ≥‚ÇÄ U) (h‚ÇÅ : surrounding_family g b Œ≥‚ÇÅ U) :
  ‚àÉ Œ≥ : ‚Ñù ‚Üí E ‚Üí ‚Ñù ‚Üí loop F, 
    (‚àÄ œÑ ‚àà I, surrounding_family g b (Œ≥ œÑ) U) ‚àß 
    Œ≥ 0 = Œ≥‚ÇÄ ‚àß
    Œ≥ 1 = Œ≥‚ÇÅ ‚àß
    (‚àÄ (œÑ ‚àà I) (x ‚àà U) (t ‚àà I) s, continuous_at ‚ÜøŒ≥ (œÑ, x, t, s)) :=
begin
  sorry
end

lemma extends_loops {U‚ÇÄ U‚ÇÅ K‚ÇÄ K‚ÇÅ : set E} (hU‚ÇÄ : is_open U‚ÇÄ) (hU‚ÇÅ : is_open U‚ÇÅ)
  (hK‚ÇÄ : compact K‚ÇÄ) (hK‚ÇÅ : compact K‚ÇÅ) (hKU‚ÇÄ : K‚ÇÄ ‚äÜ U‚ÇÄ) (hKU‚ÇÅ : K‚ÇÅ ‚äÜ U‚ÇÅ)
  {Œ≥‚ÇÄ Œ≥‚ÇÅ : E ‚Üí ‚Ñù ‚Üí loop F} 
  (h‚ÇÄ : surrounding_family g b Œ≥‚ÇÄ U‚ÇÄ) (h‚ÇÅ : surrounding_family g b Œ≥‚ÇÅ U‚ÇÅ) :
  ‚àÉ U ‚àà nhds_set (K‚ÇÄ ‚à™ K‚ÇÅ), ‚àÉ Œ≥ : E ‚Üí ‚Ñù ‚Üí loop F, 
    surrounding_family g b Œ≥ U ‚àß 
    ‚àÄ·∂† x in nhds_set K‚ÇÄ, Œ≥ x = Œ≥‚ÇÄ x ‚àß
    (‚àÄ (x ‚àà U) (t ‚àà I) s, continuous_at ‚ÜøŒ≥ (x, t, s)) :=
begin
  sorry
end

lemma exists_surrounding_loops 
  (hU : is_open U) (hK : compact K) (hKU : K ‚äÜ U) 
  (hŒ©_op : ‚àÄ x ‚àà U, is_open (prod.mk x ‚Åª¬π' Œ©))
  (hŒ©_conn : ‚àÄ x ‚àà U, is_connected (prod.mk x ‚Åª¬π' Œ©)) 
  (hg : ‚àÄ x ‚àà U, smooth_at g x) (hb : ‚àÄ x ‚àà U, smooth_at b x) (hb_in : ‚àÄ x ‚àà U, (x, b x) ‚àà Œ©) 
  (hgK : ‚àÄ·∂† x in nhds_set K, g x = b x) (hconv : ‚àÄ x ‚àà U, g x ‚àà convex_hull (prod.mk x ‚Åª¬π' Œ©)) :
  ‚àÉ Œ≥ : E ‚Üí ‚Ñù ‚Üí loop F, (‚àÄ (x ‚àà U) (t ‚àà I) s, (x, Œ≥ x t s) ‚àà Œ© ‚àß
                                              Œ≥ x 0 s = b x ‚àß
                                              smooth_at ‚ÜøŒ≥ ((x, t, s) : E √ó ‚Ñù √ó ‚Ñù)) ‚àß
                        (‚àÄ·∂† x in nhds_set K, ‚àÄ (t ‚àà I) s, Œ≥ x t s = b x)  :=
sorry
-- Manque 1.14, 1.15

lemma exists_loops [measurable_space F] [borel_space F] 
  (hU : is_open U) (hK : compact K) (hKU : K ‚äÜ U) 
  (hŒ©_op : ‚àÄ x ‚àà U, is_open (prod.mk x ‚Åª¬π' Œ©))
  (hŒ©_conn : ‚àÄ x ‚àà U, is_connected (prod.mk x ‚Åª¬π' Œ©)) 
  (hg : ‚àÄ x ‚àà U, smooth_at g x) (hb : ‚àÄ x ‚àà U, smooth_at b x) (hb_in : ‚àÄ x ‚àà U, (x, b x) ‚àà Œ©) 
  (hgK : ‚àÄ·∂† x in nhds_set K, g x = b x) (hconv : ‚àÄ x ‚àà U, g x ‚àà convex_hull (prod.mk x ‚Åª¬π' Œ©)) :
  ‚àÉ Œ≥ : E ‚Üí ‚Ñù ‚Üí loop F, (‚àÄ (x ‚àà U) (t ‚àà I) s, (x, Œ≥ x t s) ‚àà Œ© ‚àß
                                              Œ≥ x 0 s = b x ‚àß
                                              (Œ≥ x 1).average = g x ‚àß
                                              smooth_at ‚ÜøŒ≥ ((x, t, s) : E √ó ‚Ñù √ó ‚Ñù)) ‚àß
                        (‚àÄ·∂† x in nhds_set K, ‚àÄ (t ‚àà I) s, Œ≥ x t s = b x)  :=
begin
  
  sorry
end
